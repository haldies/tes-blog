generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  password      String?
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String  @id @default(cuid())
  slug  String  @unique
  title String?
  image String?
  posts Post[]
}

model Post {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  publishedAt  DateTime?
  slug         String?    @unique
  title        String?
  content      String?
  image        String?
  views        Int        @default(0)
  status       PostStatus @default(DRAFT)
  categorySlug String
  category     Category   @relation(fields: [categorySlug], references: [slug])
  userEmail    String
  user         User       @relation(fields: [userEmail], references: [email])
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum Role {
  USER
  ADMIN
}
